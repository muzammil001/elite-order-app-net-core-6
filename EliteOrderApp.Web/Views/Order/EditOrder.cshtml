@model EliteOrderApp.Web.Models.OrderModel
@{
	ViewData["Title"] = "New Order";
}


<!-- [ breadcrumb ] start -->
<div class="page-header">
	<div class="page-block">
		<div class="row align-items-center">
			<div class="col-md-12">
				<div class="page-header-title">
					<h3 class="m-b-10">New Order</h3>
				</div>
			</div>
		</div>
	</div>
</div>
<!-- [ breadcrumb ] end -->

<div class="main-body">
	<div class="page-wrapper">
		<form asp-action="NewOrder" asp-route-id="@Model.Order.Id" onsubmit="return saveOrder(this);" autocomplete="off">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<input type="hidden" asp-for="Order.Id" id="orderId" />
			<div class="form-group">
				<div class="row">
					<div class="col-md-6">
						<label asp-for="Order.OrderDate" class="control-label"></label>
						<input asp-for="Order.OrderDate" type="date" class="form-control" />
						<span asp-validation-for="Order.OrderDate" class="text-danger"></span>
					</div>
					<div class="col-md-6">
						<label asp-for="Order.DeliveryDate" class="control-label"></label>
						<input asp-for="Order.DeliveryDate" type="date" class="form-control" />
						<span asp-validation-for="Order.DeliveryDate" class="text-danger"></span>
					</div>
				</div>
			</div>
			<div class="form-group">
				<div class="row">
					<div class="col-md-12">
						<label asp-for="Order.CustomerId" class="control-label"></label>
						@Html.DropDownListFor(p => p.Order.CustomerId,
						new SelectList(Model.Customers, "Id", "Name"), "---Select Customer---",
						new { @class = "form-control" })
					</div>
				</div>
			</div>
			<div class="form-group mt-5 ">
				<div class="row">
					<div class="col-md-4">
						@Html.DropDownListFor(p => p.Order.ItemId,
						new SelectList(Model.Items, "Id", "Name"), "---Select Item---",
						new { @class = "form-control",@id="item" })

						<div class="mt-5 ml-3">
							<div class="row">
								<div class="input-group input-group-sm mb-3">
									<div class="input-group-prepend">
										<span class="input-group-text" >Total Amount:</span>
									</div>
									<input asp-for="Order.TotalAmount" type="text" class="form-control autonumber" data-v-max="999999999" id="totalAmount" required="required" aria-label="Small" aria-describedby="totalAmount" data-v-min="0">
								</div>
							</div>

							<div class="row mt-3">
								<div class="input-group input-group-sm mb-3">
									<div class="input-group-prepend">
										<span class="input-group-text" >Advance Payment:</span>
									</div>
									<input asp-for="Order.AdvancePayment" type="text" class="form-control autonumber" data-v-max="999999999" id="advancePayment" aria-label="Small" aria-describedby="advanceAmount" data-v-min="0">
								</div>
							</div>
							<div class="row mt-3">
								<div class="input-group input-group-sm mb-3">
									<div class="input-group-prepend">
										<span class="input-group-text" >Balance:</span>
									</div>
									<input asp-for="Order.Balance" type="text" class="form-control autonumber" data-v-max="999999999" id="balance" readonly="readonly" aria-label="Small" aria-describedby="balance" data-v-min="0">
								</div>
							</div>
						</div>

					</div>
					<div class="col-md-2">
						<button class="btn btn-success" id="add-to-cart" type="button">Add to cart</button>
					</div>
					<div class="col-md-6">
						<partial name="_OrderDetails" />
					</div>
				</div>
			</div>
			<div class="form-group">
				<button type="submit" class="btn btn-primary btn-lg">
					<i class="fas fa-save"></i>
					Save
				</button>
			</div>
		</form>
	</div>
</div>

@section Scripts
	{
	<script>
		$( document ).ready(function() {
			const cols = [
				{
					data: "item.name"
				},
				{
					data: "id",
					render: function (data) {
						return `<button class='btn btn-sm btn-danger js-delete-orderItem' type='button' data-orderItem-id=${data}> Delete</button>`;
					}
				}
			];
			const table = getTable("orderDetails", "/api/orders/get-orders-details/"+ @Model.Order.Id, cols, false);

			//deleteRecord("orderDetails", ".js-delete-orderItem", "/api/cartItems/delete-cart-item/", "data-cartItem-id", table);

			//$("#add-to-cart").click(function (e) {
			//	const i = $("#item").val();
			//	if (i === '') {
			//		new PNotify({
			//			title: "Please select Item.",
			//			type: 'error'
			//		});
			//		return;
			//	}
			//	const data = {
			//		ItemId: i
			//	}
			//	saveRecord("/api/cartItems/add-item-cart", data,table,"Item added in cart.");
			//});

			$("#advancePayment").on('change', function() {
				const totalAmount = parseInt($("#totalAmount").val().replace(/,/g, ''));
				const advancePayment = parseInt($("#advancePayment").val().replace(/,/g, ''));
				const balance =totalAmount-advancePayment; 
				$("#balance").val(balance);

			});

			saveOrder = form => {
				try {
					$.ajax({
						type: 'POST',
						url: form.action,
						data: new FormData(form),
						contentType: false,
						processData: false,
						success: function (res) {
							if (res.isValid) {
							
								new PNotify({
									title: 'Order has been saved.',
									type: 'success',
									width: "100%",
									cornerclass: "no-border-radius",
									addclass: "stack-custom-top bg-primary",
									stack: { "dir1": "up", "dir2": "right", "spacing1": 1 }
								});
							}
							redirectAction("Order", "ManageOrders", "", 2000);
						},
						error: function (err) {
							new PNotify({
								title: err.responseText,
								type: 'error',
								width: "100%",
								cornerclass: "no-border-radius",
								addclass: "stack-custom-bottom bg-primary",
								stack: { "dir1": "up", "dir2": "right", "spacing1": 1 }
							});
						}
					});
				} catch (e) {
					console.log(e);
				}

				//to prevent form submit event
				return false;
			}
		});
		
	</script>
}
